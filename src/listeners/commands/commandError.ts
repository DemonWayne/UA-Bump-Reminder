import { ApplicationCommandOptionType, MessageEmbed } from 'discord.js';
import { ChatInputCommand, ChatInputCommandErrorPayload, Events, Listener } from '@sapphire/framework';
import { ApplyOptions } from '@sapphire/decorators';

@ApplyOptions<Listener.Options>({ name: 'chatInputCommandError' })
export class ClientListener extends Listener<typeof Events.ChatInputCommandError> {
  public override run(error: Error, { command, interaction }: ChatInputCommandErrorPayload) {
    this.container.logger.error(`[Error] –í—ñ–¥–±—É–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ —É –∫–æ–¥—ñ.\n–ü–æ–º–∏–ª–∫–∞: ${error}`);

    if (process.env.DEVS?.split(/,\s?/).includes(interaction.user.id)) {
      const stringCommand = this.ChatInputCommandToMessageString(command, interaction);

      return interaction
        .reply({
          embeds: [
            new MessageEmbed()
              .setColor(0xeb4034)
              .setDescription(`**–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ —É –∫–æ–¥—ñ**`)
              .addFields([
                {
                  name: '**–í—ñ–¥–ª–∞–¥–∫–∞**',
                  value: [
                    `**–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á**: ${interaction.user} (\`${interaction.user.id}\`)`,
                    `**–°–µ—Ä–≤–µ—Ä**: ${interaction.guild?.name} (\`${interaction.guild?.id}\`)`,
                    `**–ö–∞–Ω–∞–ª**: ${interaction.channel} (\`${interaction.channel?.id}\`)`,
                  ].join('\n'),
                },
                { name: '**–ö–æ–º–∞–Ω–¥–∞:**', value: stringCommand },
              ])
              .setFooter({
                text: `${interaction.client.user?.username}`,
                iconURL: process.env?.ICON_URL || 'https://cdn-icons-png.flaticon.com/512/1541/1541504.png',
              }),
          ],
          ephemeral: true,
        })
        .catch(() => this.container.logger.error('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–∏–ª–∫–∏.'));
    }

    return interaction
      .reply({
        embeds: [
          new MessageEmbed()
            .setColor(0xeb4034)
            .setTitle('**üö´ | –ü–æ–º–∏–ª–∫–∞**')
            .setDescription('**–í—ñ–¥–±—É–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ —É –∫–æ–¥—ñ –∫–æ–º–∞–Ω–¥–∏. –ü–æ–≤—ñ–¥–æ–º—Ç–µ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º –ø—Ä–æ —Ü–µ!**')
            .setFooter({
              text: `${interaction.client.user?.username}`,
              iconURL: process.env?.ICON_URL || 'https://cdn-icons-png.flaticon.com/512/1541/1541504.png',
            }),
        ],
        ephemeral: true,
      })
      .catch(() => this.container.logger.error('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–∏–ª–∫–∏.'));
  }

  private ChatInputCommandToMessageString(command: ChatInputCommand, interaction: ChatInputCommand.Interaction) {
    const DEFAULT_OPTIONS: Array<ApplicationCommandOptionType> = ['BOOLEAN', 'INTEGER', 'NUMBER', 'STRING'];

    let string = `/${command.name}`;

    for (const { channel, member, name, role, type, value, user } of interaction.options.data) {
      if (DEFAULT_OPTIONS.includes(type)) string += ` **\`${name}:\`** \`${value}\``;
      else if (type === 'CHANNEL') string += ` **\`${name}:\`** ${channel}`;
      else if (type === 'MENTIONABLE') string += ` **\`${name}:\`** ${role || member || user}`;
      else if (type === 'ROLE') string += ` **\`${name}:\` ${role}`;
      else if (type === 'USER') string += ` **\`${name}:\`** ${user}`;
    }

    return string;
  }
}
